{"version":3,"sources":["components/draw.js","App.js","serviceWorker.js","index.js","../node_modules/jsdom/lib/jsdom sync","../node_modules/parse5/lib sync"],"names":["styles","draw","margin","result","color","Draw","bigscreen","useMediaQuery","minDeviceWidth","smallscreen","maxDeviceWidth","setResult","useState","sketchbig","useRef","sketchsmall","sendDataBig","c","fd","FormData","append","axios","post","headers","then","res","getImageResult","data","id","catch","err","console","log","sendDataSmall","get","React","createElement","Fragment","style","SketchField","ref","width","height","tool","Tools","Pencil","backgroundColor","lineColor","imageFormat","linewidth","className","Button","variant","onClick","handleSubmitBig","canvas","current","toDataURL","size","handleResetBig","clear","_backgroundColor","handleSubmitSmall","handleResetSmall","app","textAlign","fontFamily","display","flexDirection","justifyContent","alignItems","padding","overflow","heading","fontSize","fontWeight","marginBottom","instruction","fontStyle","marginTop","footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports"],"mappings":"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","file":"static/js/main.7a3cb6c7.chunk.js","sourcesContent":["import React, {useRef, useState} from 'react';\nimport {SketchField, Tools} from 'react-sketch'\nimport {Button} from 'react-bootstrap'\nimport { useMediaQuery } from 'react-responsive'\nimport { saveAs } from 'file-saver'\nimport axios from 'axios'\n\nconst styles = {\n    draw: {\n        margin : '0 auto'\n    },\n    result: {\n        color : 'green'\n    }\n}\n\nconst Draw = () => {\n\n    const bigscreen = useMediaQuery({ minDeviceWidth: 1201 })\n    const smallscreen = useMediaQuery({ maxDeviceWidth: 1200 })\n\n    const[result, setResult] = useState(false)\n\n    const sketchbig = useRef()\n    const sketchsmall = useRef()\n\n    const handleSubmitBig = () => {\n        const canvas = sketchbig.current.toDataURL()\n        //saveAs(canvas, 'digit.jpg')\n        sendDataBig(canvas)\n    }\n\n    const handleSubmitSmall = () => {\n        const canvas = sketchsmall.current.toDataURL()\n        //saveAs(canvas, 'digit.jpg')\n        sendDataSmall(canvas)\n    }\n\n    const handleResetBig = () =>{\n        sketchbig.current.clear()\n        sketchbig.current._backgroundColor('black')\n        setResult(false)\n    }\n\n    const handleResetSmall = () =>{\n        sketchsmall.current.clear()\n        sketchsmall.current._backgroundColor('black')\n        setResult(false)\n    }\n\n    const sendDataBig = (c) => {\n        const headers = {\n            'accept' : 'application/json'\n        }\n        const fd = new FormData()\n        fd.append('image', c)\n\n        axios.post('https://digitrecogbackend.pythonanywhere.com/api/digits/', fd, {headers:headers})\n        .then(res=>{\n            getImageResult(res.data.id)\n        })\n        .catch(err=>console.log(err))\n    }\n\n    const sendDataSmall = (c) => {\n        const headers = {\n            'accept' : 'application/json'\n        }\n        const fd = new FormData()\n        fd.append('image', c)\n\n        axios.post('https://digitrecogbackend.pythonanywhere.com/api/digits/', fd, {headers:headers})\n        .then(res=>{\n            getImageResult(res.data.id)\n        })\n        .catch(err=>console.log(err))\n    }\n\n    const getImageResult = (id) => {\n        axios.get(`https://digitrecogbackend.pythonanywhere.com/api/digits/${id}/`)\n        .then(res=>{\n            setResult(res.data.result) // here result in res.data.id is the result column of table Digit.\n        })\n    }\n\n    return(\n        <React.Fragment>\n\n            {result && <h1 style = {styles.result}>Result is {result}</h1>}\n\n            {bigscreen &&\n            <SketchField\n                ref = {sketchbig}\n                width = \"300px\"\n                height = '300px'\n                style = {styles.draw}\n                tool = {Tools.Pencil}\n                backgroundColor = 'black'\n                lineColor = 'white'\n                imageFormat = 'jpg'\n                linewidth = {30}\n            />\n            }\n\n            {smallscreen &&\n            <SketchField\n                ref = {sketchsmall}\n                width = \"200px\"\n                height = '200px'\n                style = {styles.draw}\n                tool = {Tools.Pencil}\n                backgroundColor = 'black'\n                lineColor = 'white'\n                imageFormat = 'jpg'\n                linewidth = {30}\n            />\n            }\n\n            {bigscreen &&\n            <div className = \"mt-3\">\n                <Button variant = \"outline-primary\" onClick = {handleSubmitBig} size = \"lg\">Predict</Button>\n                <Button variant = \"outline-secondary\" onClick = {handleResetBig} className = \"ml-3\" size = \"lg\">Reset</Button>\n            </div>\n            }\n\n            {smallscreen &&\n            <div className = \"mt-3\">\n                <Button variant = \"outline-primary\" onClick = {handleSubmitSmall} size = \"lg\">Predict</Button>\n                <Button variant = \"outline-secondary\" onClick = {handleResetSmall} className = \"ml-3\" size = \"lg\">Reset</Button>\n            </div>\n            }\n\n        </React.Fragment>\n    )\n}\n\nexport default Draw;","import React from 'react';\nimport Draw from './components/draw';\n\nfunction App() {\n  return (\n    <div style={styles.app}>\n      <h1 style={styles.heading}>Digit Recognizer</h1>\n      <p style={styles.instruction}>(Draw any digit 0 to 9)</p>\n      <Draw />\n      <footer style={styles.footer}>\n        <p>Made with ❤️ by Akash Verma</p>\n      </footer>\n    </div>\n  );\n}\n\nconst styles = {\n  app: {\n    textAlign: 'center',\n    fontFamily: 'Arial, sans-serif',\n    backgroundColor: 'gray', // Set the background to gray\n    color: '#fff',\n    height: '100vh',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    margin: 0,\n    padding: 0,\n    overflow: 'hidden',\n  },\n  heading: {\n    fontSize: '2.5rem',\n    fontWeight: 'bold',\n    marginBottom: '10px',\n  },\n  instruction: {\n    fontSize: '1rem',\n    fontStyle: 'italic',\n    marginTop: '0',\n    marginBottom: '20px',\n  },\n  footer: {\n    marginTop: 'auto', // Pushes the footer to the bottom\n    backgroundColor: '#2c2c2c',\n    color: '#fff',\n    padding: '10px 20px',\n    width: '100%',\n    textAlign: 'center',\n    fontSize: '0.9rem',\n  },\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 733;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 764;"],"sourceRoot":""}